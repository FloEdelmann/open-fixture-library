@mixin icon-button($hover-color, $active-color) {
  $icon-size: 1.4em;
  $padding: 0.3em;

  display: block;
  position: relative;
  padding: 0 0 0 calc(#{$icon-size} + #{2*$padding});
  width: 0;
  height: calc(#{$icon-size} + #{2*$padding});
  overflow: hidden;
  border: 1px solid;
  border-radius: 3px;
  cursor: pointer;

  &::-moz-focus-inner {
    border: 0;
  }

  & > .icon {
    display: block;
    position: absolute;
    width: $icon-size;
    height: $icon-size;
    top: $padding;
    left: $padding;
    fill: currentcolor;
  }

  @include mobile-hover-emulation((
    background-color: rgba($hover-color, 0) $hover-color,
    border-color: rgba($hover-color, 0) rgba($hover-color, 0),
    color: $secondary-text-dark $primary-text-light
  ));

  &:focus {
    border-color: $hover-color;
    outline: none;
  }

  &:active {
    background-color: $active-color;
    border-color: transparent;
    color: $primary-text-light;
  }
}

@mixin home-logo-sizing($width, $padding) {
  padding-left: calc(#{$width} + #{2*$padding});
  background-position: $padding center;
  background-size: calc(100% - #{2*$padding}) auto;
}

@mixin animation-keyframes {
  $animation-number: 0 !default !global;
  $animation-number: $animation-number + 1 !global;
  $name: unquote("ofl-animation-#{$animation-number}");
  animation-name: $name;
  @at-root {
    @keyframes #{$name} {
      @content;
    }
  }
}


/**
 * Usage:
 *   @include mobile-hover-emulation((
 *     background-color: <start color> <end color>,
 *     // ...
 *   ), 0.1s, 0.3s);
 *
 * Result:
 *   & {
 *     background-color: <start-color>;
 *     transition-duration: 0.1s;
 *     transition-property: background-color, color;
 *   }
 *
 *   #ofl-root.has-hover &:hover {
 *     background-color: <end-color>;
 *   }
 *   #ofl-root:not(.has-hover) &:hover {
 *     animation-delay: 0.3s;
 *     animation-duration: 0.1s;
 *     animation-fill-mode: both;
 *     animation-name: ofl-animation-1;
 *   }
 *
 *   @keyframes ofl-animation-1 {
 *     from {
 *       background-color: <end-color>;
 *     }
 *     to {
 *       background-color: <start-color>;
 *     }
 *   }
 */
@mixin mobile-hover-emulation($transition-map, $transition-duration: 0.2s, $mobile-hover-delay: 0.2s) {
  @each $property in map-keys($transition-map) {
    #{$property}: nth(map-get($transition-map, $property), 1);
  }

  transition-duration: $transition-duration;
  transition-property: map-keys($transition-map);

  #ofl-root.has-hover &:hover {
    @each $property in map-keys($transition-map) {
      #{$property}: nth(map-get($transition-map, $property), 2);
    }
  }

  #ofl-root:not(.has-hover) &:hover {
    animation-delay: $mobile-hover-delay;
    animation-duration: $transition-duration;
    animation-fill-mode: both;

    @include animation-keyframes {
      from {
        @each $property in map-keys($transition-map) {
          #{$property}: nth(map-get($transition-map, $property), 2);
        }
      }
      to {
        @each $property in map-keys($transition-map) {
          #{$property}: nth(map-get($transition-map, $property), 1);
        }
      }
    }
  }
}
