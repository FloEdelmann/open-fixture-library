##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://wiki.nginx.org/Pitfalls
# https://wiki.nginx.org/QuickStart
# https://wiki.nginx.org/Configuration
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
#
# Test the configuration with `nginx -t`
# before restarting with `systemctl restart nginx`
##


# requests to https://open-fixture-library.org (without subdomain)
# proxied to http://localhost:5000
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name open-fixture-library.org;
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/open-fixture-library.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/open-fixture-library.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # drop connection for all subdomains (if not handled elsewhere anyway)
    if ($host != open-fixture-library.org) {
        return 444;
    }

    location / {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}


# redirect HTTPS requests from www subdomain to main domain
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name www.open-fixture-library.org;
    server_tokens off;

    return 301 https://open-fixture-library.org$request_uri;
}


# all HTTP requests that don't match another rule
server {
    listen 80 default_server;
    listen [::]:80;

    server_name _;
    server_tokens off;

    # drop connection
    return 444;
}


# redirect requests to http://[www.]open-fixture-library.org to HTTPS version
# No canonicalization steps are taken yet.
# See https://www.sentinelstand.com/article/http-strict-transport-security-hsts-canonical-www-redirects
server {
    listen 80;
    listen [::]:80;

    server_name open-fixture-library.org www.open-fixture-library.org;
    server_tokens off;

    return 301 https://$host$request_uri;
}


# requests to https://webhooks.open-fixture-library.org
# proxied to http://localhost:40010
server {
    listen [::]:443 ssl;
    listen 443 ssl;

    server_name webhooks.open-fixture-library.org;
    server_tokens off;

    location / {
        proxy_pass http://localhost:40010;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}


# requests to https://embetty.open-fixture-library.org
# proxied to http://localhost:6977
server {
    listen [::]:443 ssl;
    listen 443 ssl;

    server_name embetty.open-fixture-library.org;
    server_tokens off;

    location / {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # if request does not have an "Origin" HTTP header (only sent from within fetch / XHR requests)
        if ($http_origin = '') {
            set $cors 'allowed';
        }

        # if request comes from one of these allowed domains:
        # - https://open-fixture-library.org
        # - https://*.open-fixture-library.org
        # - https://open-fixture-library-pr-*.herokuapp.com
        # - localhost on any port, http and https
        # (see https://regex101.com/r/B0osaG/1)
        if ($http_origin ~* (^(?:https:\/\/(?:[a-z0-9_-]+\.)?open-fixture-library(?:\.org|-pr-\d+\.herokuapp\.com)|https?:\/\/localhost)(?::\d+)?$)) {
            set $cors 'allowed';
        }

        if ($cors != 'allowed') {
            add_header 'Access-Control-Allow-Origin' 'https://open-fixture-library.org' always;
            add_header 'Vary' 'Origin' always;
            return 403;
        }

        proxy_pass http://localhost:6977;
    }
}
